* ABOUT THIS CONFIG 
This is my personal Doom Emacs config.  Doom Emacs is a distribution of Emacs that uses the "evil" keybindings (Vim keybindings) and includes a number of nice extensions and a bit of configuration out of the box.  I am maintaing this config not just for myself, but also for those that want to explore some of what is possible with Emacs.  I will add a lot of examples of plugins and settings, some of them I may not even use personally.  I do this because many people following me on YouTube look at my configs as "documentation".

* Necessities
:PROPERTIES:
:ID:       d0af93b4-217a-4927-83f1-bc23223b4297
:END:
#+begin_src emacs-lisp
(setq custom-file null-device)
;;(custom-set-faces '(fixed-pitch ((t (:family "Iosevka"))))) ; or set it to nil
#+end_src
* BOOKMARKS AND BUFFERS
Doom Emacs uses 'SPC b' for keybindings related to bookmarks and buffers.  Bookmarks are somewhat like registers in that they record positions you can jump to.  Unlike registers, they have long names, and they persist automatically from one Emacs session to the next. The prototypical use of bookmarks is to record where you were reading in various files.  Regarding /buffers/, the text you are editing in Emacs resides in an object called a /buffer/. Each time you visit a file, a buffer is used to hold the file’s text. Each time you invoke Dired, a buffer is used to hold the directory listing.
* Emacs Full-screen & Transparent Background on startup
:PROPERTIES:
:ID:       41431d88-58c9-4ef8-afe8-66fc73a86a88
:END:
#+BEGIN_SRC elisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
(set-frame-parameter (selected-frame) 'alpha '(95 50))
#+END_SRC
* DIRED
:PROPERTIES:
:ID:       5d51feeb-56aa-4f7e-8377-df46d0cf36c9
:END:
Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).  Doom Emacs does not use 'SPC d' for any of its keybindings, so I've chosen the format of 'SPC d' plus 'key'.

| COMMAND                                   | DESCRIPTION                                     | KEYBINDING |
|-------------------------------------------+-------------------------------------------------+------------|
| dired                                     | /Open dired file manager/                         | SPC d d    |
| dired-jump                                | /Jump to current directory in dired/              | SPC d j    |
| (in dired) peep-dired                     | /Toggle image previews within dired/              | SPC d p    |
| (in dired) dired-view-file                | /View file in dired/                              | SPC d v    |
| (in dired) dired-up-directory             | Go up in the directory tree                     | h          |
| (in dired) dired-find-file                | Go down in the directory tree (or open if file) | l          |
| (in peep-dired-mode) peep-dired-next-file | /Move to next file in peep-dired-mode/            | j          |
| (in peep-dired-mode) peep-dired-prev-file | /Move to previous file in peep-dired-mode/        | k          |

#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Dired"
      "d d" #'dired
      :leader
      :desc "Dired jump to current"
      "d j" #'dired-jump
      (:after dired
       (:map dired-mode-map
        :leader
        :desc "Peep-dired image previews"
        "d p" #'peep-dired
        :leader
        :desc "Dired view file"
        "d v" #'dired-view-file)))
;; Make 'h' and 'l' go back and forward in dired. Much faster to navigate the directory structure!
(evil-define-key 'normal dired-mode-map
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
;; If peep-dired is enabled, you will get image previews as you go up/down with 'j' and 'k'
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
;; With dired-open plugin, you can launch external programs for certain extensions
;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
(setq dired-open-extensions '(("gif" . "sxiv")
                              ("jpg" . "sxiv")
                              ("png" . "sxiv")
                              ("mkv" . "mpv")
                              ("mp4" . "mpv")))
(after! dired
  (setq dired-listing-switches "-agho --group-directories-first")
  (setq delete-by-moving-to-trash t))
#+END_SRC

* EWW
:PROPERTIES:
:ID:       083a6854-11d5-4c3e-9171-5619ff2d2a82
:END:
EWW is the Emacs Web Wowser, the builtin browser in Emacs.  Below I set urls to open in a specific browser (eww) with browse-url-browser-function.  By default, Doom Emacs does not use 'SPC e' for anything, so I choose to use the format 'SPC e' plus 'key' for these (I also use 'SPC e' for 'eval' keybindings).  I chose to use 'SPC s w' for eww-search-words because Doom Emacs uses 'SPC s' for 'search' commands.

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
(map! :leader
      :desc "Eww web browser"
      "e w" #'eww
      :leader
      :desc "Eww reload page"
      "e R" #'eww-reload
      :leader
      :desc "Search web for text between BEG/END"
      "s w" #'eww-search-words)
#+END_SRC

* FONTS
:PROPERTIES:
:ID:       00076b87-c351-41bc-a6d8-7799c7709fd5
:END:
Settings related to fonts within Doom Emacs:
+ 'doom-font' -- standard monospace font that is used for most things in Emacs.
+ 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
+ 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
+ 'font-lock-comment-face' -- for comments.
+ 'font-lock-keyword-face' -- for keywords with special significance, like ‘for’ and ‘if’ in C.

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Fantasque Sans Mono" :size 18)
      doom-big-font (font-spec :family "Fantasque Sans Mono" :size 24)
      doom-variable-pitch-font (font-spec :family "Ubuntu" :size 16))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
#+END_SRC
* Emacy everywhere (hlissner/doom-emacs)
:PROPERTIES:
:ID:       83d62e30-80fc-461f-bef3-d66ef4a8d90e
:END:
#+begin_src emacs-lisp
(use-package! emacs-everywhere
  ;; Entry points into this package are autoloaded; i.e. the `emacs-everywhere'
  ;; function, meant to be called directly via emacsclient. See this module's
  ;; readme for details.
  :defer t
  :config
  (set-yas-minor-mode! 'emacs-everywhere-mode)

  (after! doom-modeline
    (doom-modeline-def-segment emacs-everywhere
      (concat
       (doom-modeline-spc)
       (when (emacs-everywhere-markdown-p)
         (concat
          (all-the-icons-octicon "markdown" :face 'all-the-icons-green :v-adjust 0.02)
          (doom-modeline-spc)))
       (propertize (emacs-everywhere-app-class emacs-everywhere-current-app)
                   'face 'doom-modeline-project-dir)
       (doom-modeline-spc)
       (propertize (truncate-string-to-width
                    (emacs-everywhere-app-title emacs-everywhere-current-app)
                    45 nil nil "…")
                   'face 'doom-modeline-buffer-minor-mode)))
    (doom-modeline-def-modeline 'emacs-everywhere
      '(bar modals emacs-everywhere buffer-position word-count parrot selection-info)
      '(input-method major-mode checker))
    (add-hook! 'emacs-everywhere-mode-hook
      (defun +everywhere-set-modeline ()
        (doom-modeline-set-modeline 'emacs-everywhere))))
  (add-hook! 'emacs-everywhere-init-hooks
    (defun +everywhere-clear-persp-info-h ()
      (when (bound-and-true-p persp-mode)
        (setq persp-emacsclient-init-frame-behaviour-override nil))))
  (after! solaire-mode
    (add-hook 'emacs-everywhere-init-hooks #'solaire-mode)))
#+end_src
* Emojify
:PROPERTIES:
:ID:       0ca88d79-6428-4308-978f-80fd6f6c409d
:END:
#+begin_src emacs-lisp
(use-package! emojify
  :config
  (when (member "Noto Color Emoji" (font-family-list))
    (set-fontset-font
     t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend))
  (setq emojify-display-style 'unicode)
  (setq emojify-emoji-styles '(unicode)))
#+end_src
* IVY
Ivy is a generic completion mechanism for Emacs.

** IVY-POSFRAME
:PROPERTIES:
:ID:       121bd8d9-9c43-4170-b7d9-432ca2ca98a8
:END:
Ivy-posframe is an ivy extension, which lets ivy use posframe to show its candidate menu.  Some of the settings below involve:
+ ivy-posframe-display-functions-alist -- sets the display position for specific programs
+ ivy-posframe-height-alist -- sets the height of the list displayed for specific programs

Available functions (positions) for 'ivy-posframe-display-functions-alist'
+ ivy-posframe-display-at-frame-center
+ ivy-posframe-display-at-window-center
+ ivy-posframe-display-at-frame-bottom-left
+ ivy-posframe-display-at-window-bottom-left
+ ivy-posframe-display-at-frame-bottom-window-center
+ ivy-posframe-display-at-point
+ ivy-posframe-display-at-frame-top-center

=NOTE:= If the setting for 'ivy-posframe-display' is set to 'nil' (false), anything that is set to 'ivy-display-function-fallback' will just default to their normal position in Doom Emacs (usually a bottom split).  However, if this is set to 't' (true), then the fallback position will be centered in the window.

#+BEGIN_SRC emacs-lisp
(require 'ivy-posframe)
;; Global mode
;; display at `ivy-posframe-style'
(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))
(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left)))
;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-bottom-left)))
;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))

(ivy-posframe-mode 1) ; 1 enables posframe-mode, 0 disables it.
#+END_SRC

** IVY KEYBINDINGS
:PROPERTIES:
:ID:       4052b13d-3358-4be2-9862-c6bce2ac1e0b
:END:
By default, Doom Emacs does not use 'SPC v', so the format I use for these bindings is 'SPC v' plus 'key'.

#+BEGIN_SRC emacs-lisp
(map! :leader
      (:prefix ("v" . "ivy-views")
      :desc "Ivy push view"
      "p" #'ivy-push-view
      :leader
      :desc "Ivy switch view"
      "s" #'ivy-switch-view))
#+END_SRC

* LINE SETTINGS
:PROPERTIES:
:ID:       2fb19e90-59ec-474e-a772-963b2e545eed
:END:
I have toggled display-line-numbers-type so I have line numbers displayed.  Doom Emacs uses 'SPC t' for "toggle" commands, so I choose 'SPC t t' for toggle-truncate-lines.

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
(map! :leader
      :desc "Toggle truncate lines"
      "t t" #'toggle-truncate-lines)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

* NEOTREE
:PROPERTIES:
:ID:       87fa4c7d-4551-4a40-a1bc-ec0160eb0926
:END:
Neotree is a file tree viewer.  When you open neotree, it jumps to the current file thanks to neo-smart-open.  The neo-window-fixed-size setting makes the neotree width be adjustable.  Doom Emacs had no keybindings set for neotree.  Since Doom Emacs uses 'SPC t' for 'toggle' keybindings, I used 'SPC t n' for toggle-neotree.

#+BEGIN_SRC emacs-lisp
(after! neotree
  (setq neo-smart-open t
        neo-window-fixed-size nil))
(map! :leader
      :desc "Toggle neotree file viewer"
      "t n" #'toggle-neotree)
#+END_SRC

* ORG MODE
:PROPERTIES:
:ID:       98e897d4-8a54-4b1e-969a-de4b6e475432
:END:
Note that I wrapped most of this in (after! org).  Without this, my settings might be evaluated too early, which will result in my settings being overwritten by Doom's defaults.  I have also enabled org-journal by adding (+journal) to the org section of my Doom Emacs init.el.

#+BEGIN_SRC emacs-lisp
(after! org
        (require 'org-bullets)  ; Nicer bullets in org-mode
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
        (add-to-list 'auto-mode-alist '("\.\(org\|agenda_files\|txt\)$" . org-mode))
        (setq org-directory "~/Insync/BC/Emacs/org/"
              +org-capture-journal-file "~/Insync/BC/Emacs/org/journal.org"
              org-default-notes-file (expand-file-name "notes.org" org-directory)
              org-agenda-files (directory-files-recursively "~/Insync/BC/Emacs/org/" "\\.org$")
              org-ellipsis " ▼ "
              org-log-done 'time
              org-journal-dir "~/Insync/BC/Emacs/org/"
              org-startup-folded t
              org-journal-date-format "%B %d, %Y (%A)"
              org-journal-file-format "%Y-%m-%d"
              org-hide-emphasis-markers t
              ;; ex. of org-link-abbrev-alist in action
              ;; [[arch-wiki:Name_of_Page][Description]]
              org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
              '(("google" . "http://www.google.com/search?q=")
                ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
                ("ddg" . "https://duckduckgo.com/?q=")
                ("wiki" . "https://en.wikipedia.org/wiki/"))
              org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
              '((sequence
                 "TODO(t)"           ; A task that is ready to be tackled
                 "ONIT(o)"
                 "NEXT(n)"
                 "PROJ(p)"           ; A project that contains other tasks
                 "MEET(m)"
                 "WAIT(w@/!)"           ; Something is holding up this task
                 "|"                 ; The pipe necessary to separate "active" states and "inactive" states
                 "DONE(d)"           ; Task has been completed
                 "CANCL(c@/t)" )))) ; Task has been cancelled
  (map! :leader
        :desc "Insert Schedule"
        "m s" #'org-schedule
        :desc "Inactive Timestamp"
        "m !" #'org-timestamp-inactive)
#+END_SRC

I was tired of having to run org-babel-tangle after saving my literate dotfiles.  So the following function runs org-babel-tangle upon saving any org-mode buffer.  This is asynchronous meaning that it dispatches the tangle function to a subprocess, so that the main Emacs is not blocked while it runs.

#+BEGIN_SRC emacs-lisp
(defun dt/org-babel-tangle-async (file)
  "Invoke `org-babel-tangle-file' asynchronously."
  (message "Tangling %s..." (buffer-file-name))
  (async-start
   (let ((args (list file)))
  `(lambda ()
        (require 'org)
        ;;(load "~/.emacs.d/init.el")
        (let ((start-time (current-time)))
          (apply #'org-babel-tangle-file ',args)
          (format "%.2f" (float-time (time-since start-time))))))
   (let ((message-string (format "Tangling %S completed after " file)))
     `(lambda (tangle-time)
        (message (concat ,message-string
                         (format "%s seconds" tangle-time)))))))

(defun dt/org-babel-tangle-current-buffer-async ()
  "Tangle current buffer asynchronously."
  (dt/org-babel-tangle-async (buffer-file-name)))
#+END_SRC
** Org Ref
:PROPERTIES:
:ID:       fdee8710-c4d0-4c61-95d2-adf4749a3df7
:END:
#+begin_src emacs-lisp
(use-package! org-ref
  :after org
  :config
  (setq org-ref-default-bibliography
        '("~/Insync/BC/Emacs/org")))
#+end_src
* Necessities
:PROPERTIES:
:ID:       f283f17b-4d8b-471f-b80c-c59cc3227d17
:END:
#+begin_src emacs-lisp
;;(define-key evil-normal-state-map "u" 'undo-fu-only-undo)
;;(define-key evil-normal-state-map "\C-r" 'undo-fu-only-redo)
;;(setq doom-modeline-major-mode-icon t)
;;(after! org
;;  (setq undo-outer-limit 24000000)
;;  ;; Open Links in new window
;;  (setq org-link-frame-setup '(
;;                               (vm . vm-visit-folder-other-frame)
;;                               (vm-imap . vm-visit-imap-folder-other-frame)
;;                               (file . find-file-other-window)
;;                               (wl . wl-other-frame))))
#+end_src
* Theme
:PROPERTIES:
:ID:       fe8b9cec-4a55-4934-9816-26b65966beec
:END:
#+begin_src emacs-lisp
;; (setq doom-theme 'doom-dracula)
;; LEUVEN Theme by github.com/fniessen
;; Fontify code in blocks in code blocks
(setq doom-theme 'leuven)
(after! org
  (setq org-src-fontify-natively t)
  ;; Fontify the whole line for headings (with a background color).
  (setq org-fontify-whole-heading-line t)
  ;; Faces for specific TODO keywords.
  (setq org-todo-keyword-faces
        '(("WAIT" . leuven-org-waiting-for-kwd)))
  ;; Mode-line colors
  ;; Org non-standard faces.
  (defface leuven-org-waiting-for-kwd
    '((t :weight bold :box "#89C58F"
         :foreground "#89C58F" :background "#E2FEDE"))
    "Face used to display state WAIT.")
;;  (defface mode-line
;;    '((t (:box (:line-width 1 :color "#1A2F54") :foreground "green" :background "DarkOrange")))
;;    "Orange and green colors in mode-line.")
  )
#+end_src
* XWidget
:PROPERTIES:
:ID:       62242e98-0567-4fd1-859e-de8ea13abd30
:END:
#+begin_src emacs-lisp
(map! :leader
      :desc "Xwidget browser" "o x" #'xwidget-webkit-browse-url
      :leader
      :desc
      )
#+end_src
* Annotate (bastibe@github)
:PROPERTIES:
:ID:       5c9e9521-8e81-47d9-b427-6c3972c28e23
:END:
#+begin_src emacs-lisp
(map! :leader
      :desc "Annotation-Mode"
      "t A" #'annotate-mode)
(map! :leader
 (:prefix ("A" . "Annotations")
      :desc "Annote me"
      "a" #'annotate-annotate
      :leader
      :desc "Refresh"
      "r" #'annotate-load-annotations))
#+end_src
* Xwidget Browser
:PROPERTIES:
:ID:       050cd414-a861-464d-be2f-3880e71a64af
:END:
#+begin_src emacs-lisp
(map! :leader
      :desc "XWidget Browser" "o x" #'xwidget-webkit-browse-url)
#+end_src
* Olivetti
:PROPERTIES:
:ID:       29190963-28f2-4371-888a-33904dd718c2
:END:
#+begin_src emacs-lisp
(map! :leader
      :desc "Olivetti-Mode"
      "t o" #'olivetti-mode
      :leader
      :desc "Olivetti Set Width"
      "b o" #'olivetti-set-width)
(add-hook 'text-mode-hook #'olivetti-mode)
#+end_src

* REGISTERS
:PROPERTIES:
:ID:       6cec0b74-0f0c-4bd6-b0af-a71e16a7a72f
:END:
Emacs registers are compartments where you can save text, rectangles and positions for later use. Once you save text or a rectangle in a register, you can copy it into the buffer once or many times; once you save a position in a register, you can jump back to that position once or many times.  The default GNU Emacs keybindings for these commands (with the exception of counsel-register) involves 'C-x r' followed by one or more other keys.  I wanted to make this a little more user friendly, and since I am using Doom Emacs, I choose to replace the 'C-x r' part of the key chords with 'SPC r'.

| COMMAND                          | DESCRIPTION                      | KEYBINDING |
|----------------------------------+----------------------------------+------------|
| copy-to-register                 | /Copy to register/                 | SPC r c    |
| frameset-to-register             | /Frameset to register/             | SPC r f    |
| insert-register                  | /Insert contents of register/      | SPC r i    |
| jump-to-register                 | /Jump to register/                 | SPC r j    |
| list-registers                   | /List registers/                   | SPC r l    |
| number-to-register               | /Number to register/               | SPC r n    |
| counsel-register                 | /Interactively choose a register/  | SPC r r    |
| view-register                    | /View a register/                  | SPC r v    |
| window-configuration-to-register | /Window configuration to register/ | SPC r w    |
| increment-register               | /Increment register/               | SPC r +    |
| point-to-register                | /Point to register/                | SPC r SPC  |

#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Copy to register"
      "r c" #'copy-to-register
      :leader
      :desc "Frameset to register"
      "r f" #'frameset-to-register
      :leader
      :desc "Insert contents of register"
      "r i" #'insert-register
      :leader
      :desc "Jump to register"
      "r j" #'jump-to-register
      :leader
      :desc "List registers"
      "r l" #'list-registers
      :leader
      :desc "Number to register"
      "r n" #'number-to-register
      :leader
      :desc "Interactively choose a register"
      "r r" #'counsel-register
      :leader
      :desc "View a register"
      "r v" #'view-register
      :leader
      :desc "Window configuration to register"
      "r w" #'window-configuration-to-register
      :leader
      :desc "Increment register"
      "r +" #'increment-register
      :leader
      :desc "Point to register"
      "r SPC" #'point-to-register)
#+END_SRC

* SPLITS
:PROPERTIES:
:ID:       71fca0d9-dc88-4663-a131-ea1513e2d6f5
:END:
I set splits to default to opening on the right using 'prefer-horizontal-split'.  I set a keybinding for 'clone-indirect-buffer-other-window' for when I want to have the same document in two splits.  The text of the indirect buffer is always identical to the text of its base buffer; changes made by editing either one are visible immediately in the other.  But in all other respects, the indirect buffer and its base buffer are completely separate.  For example, I can fold one split but other will be unfolded.

#+BEGIN_SRC emacs-lisp
(defun prefer-horizontal-split ()
  (set-variable 'split-height-threshold nil t)
  (set-variable 'split-width-threshold 40 t)) ; make this as low as needed
(add-hook 'markdown-mode-hook 'prefer-horizontal-split)
(map! :leader
      :desc "Clone indirect buffer other window"
      "b c" #'clone-indirect-buffer-other-window)
#+END_SRC

* SUBLIMITY
:PROPERTIES:
:ID:       153e9080-f127-48f6-90fb-3bc63ec0e36a
:END:
The sublimity extension offers Sublime-like smooth scrolling and an experimental minimap.  You can also require sublimity-attractive if you want to center everything for a distraction-free mode.  I do not use this extension, hence the reason I have sublimity-mode set to 0.  Set this to 1 to enable it.

#+BEGIN_SRC emacs-lisp
(require 'sublimity-scroll)
(require 'sublimity-map)
(require 'sublimity-attractive)
(sublimity-mode 0)
#+END_SRC

* WINNER MODE
:PROPERTIES:
:ID:       039ab766-0806-46a1-8f79-5636622e299d
:END:
Winner mode has been included with GNU Emacs since version 20.  This is a global minor mode and, when activated, it allows you to “undo” (and “redo”) changes in the window configuration with the key commands 'SCP w <left>' and 'SPC w <right>'.

#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Winner redo"
      "w <right>" #'winner-redo
      :leader
      :desc "Winner undo"
      "w <left>" #'winner-undo)
#+END_SRC
* ORG-ROAM
:PROPERTIES:
:ID:       783bb094-e518-411a-aec8-d435b2bf48f5
:END:
What DOOM left out or broke
#+BEGIN_SRC emacs-lisp
;; Preliminaries as seen in @jethro config.el
(use-package! org-roam
  :init
  (map! :leader
        :prefix "n"
        :desc "org-roam" "l" #'org-roam-buffer-toggle
        :desc "org-roam-insert" "i" #'org-roam-node-insert
        :desc "org-roam-dailies-find-date" "d" #'org-roam-dailies-find-date
        :desc "org-roam-ref-find" "r" #'org-roam-ref-find
        :desc "org-roam-dailies-find-today" "t" #'org-roam-dailies-find-today
        :desc "org-roam-dailies-capture-today" "y" #'org-roam-dailies-find-yesterday
        :desc "org-roam-dailies-capture-today" "j" #'org-roam-dailies-capture-today
        :desc "org-roam-find-file" "f" #'org-roam-node-find
        :desc "org-roam-capture" "c" #'org-roam-capture
        :desc "org-roam-unlinked-references" "u" #'org-roam-unlinked-references)
  :config
  (define-key org-roam-mode-map [mouse-1] #'org-roam-visit-thing)
  (setq org-roam-directory "~/Insync/BC/Emacs/org/"
        org-roam-dailies-directory "daily/"
        org-roam-db-gc-threshold gc-cons-threshold
        org-id-link-to-org-use-id t
        org-roam-completion-everywhere t
        org-roam-node-display-template "${title:100} ${tags:50}")
  (add-to-list 'display-buffer-alist
               '(("\\*org\\*"
                  (display-buffer-in-direction)
                  (direction . right)
                  (window-width . 0.33)
                  (window-height . fit-window-to-buffer))))
  (setq org-roam-mode-sections
        (list #'org-roam-backlinks-insert-section
              #'org-roam-reflinks-insert-section
              #'org-roam-unlinked-references-insert-section))
(org-roam-setup)
(setq org-roam-capture-templates
        '(("d" "default" plain
           "%?"
           :if-new (file+head "${slug}.org"
                              "#+title: ${title}\n#+CREATED: %<%Y-%m-%d>\n#+FILETAGS:\n")
           :immediate-finish t
           :unnarrowed t)))
      (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :if-new (file+head "daily/%<%Y-%m-%d>.org"
                              "#+TITLE: %<%A, %e %B %Y>\n#+FILETAGS:\n")))
        ))
#+END_SRC
** Org-Roam Server
:PROPERTIES:
:ID:       4e56d29f-0cb7-467f-bde9-bf47d48e3352
:END:
#+BEGIN_SRC emacs-lisp
;;(use-package org-roam-server
;;  :config
;;  (setq org-roam-server-host "127.0.0.1"
;;        org-roam-server-port 8080
;;        org-roam-server-export-inline-images t
;;        org-roam-server-authenticate nil
;;        org-roam-server-network-label-truncate t
;;        org-roam-server-network-label-truncate-length 60
;;        org-roam-server-network-label-wrap-length 20))
#+END_SRC
** Org-Roam Bibtex
:PROPERTIES:
:ID:       ebae07ce-0f9a-4fdc-9fb4-f41af41a0180
:END:
#+begin_src emacs-lisp
(use-package! org-roam-bibtex
  :after org-roam
  :config
  (require 'org-ref))
#+end_src
* Org-Journal
:PROPERTIES:
:ID:       572a5780-2d94-4c30-8278-2a1ba365a233
:END:
#+BEGIN_SRC emacs-lisp
(use-package! org-journal
      :config
      (setq org-journal-dir "~/Insync/BC/Emacs/org/"
      org-journal-date-prefix "#+TITLE: "
      org-journal-file-format "%Y-%m-%d.org"
      org-journal-date-format "%A, %d %B %Y"
    org-journal-enable-agenda-integration t))
#+END_SRC
* DEFT
:PROPERTIES:
:ID:       8a697ed4-b75f-45df-9705-209c62f53c27
:END:
#+BEGIN_SRC emacs-lisp
(setq deft-directory "~/Insync/BC/Emacs/org/")
(map! :leader
      :prefix "n"
      :desc "Open deft"
      "D" #'deft)
#+END_SRC
